// Code generated by ent, DO NOT EDIT.

package order

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/sundayonah/digital_post_office/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldID, id))
}

// TrackingNumber applies equality check predicate on the "tracking_number" field. It's identical to TrackingNumberEQ.
func TrackingNumber(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldTrackingNumber, v))
}

// SafeCode applies equality check predicate on the "safe_code" field. It's identical to SafeCodeEQ.
func SafeCode(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldSafeCode, v))
}

// PackageDescription applies equality check predicate on the "package_description" field. It's identical to PackageDescriptionEQ.
func PackageDescription(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldPackageDescription, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldUpdatedAt, v))
}

// TrackingNumberEQ applies the EQ predicate on the "tracking_number" field.
func TrackingNumberEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldTrackingNumber, v))
}

// TrackingNumberNEQ applies the NEQ predicate on the "tracking_number" field.
func TrackingNumberNEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldTrackingNumber, v))
}

// TrackingNumberIn applies the In predicate on the "tracking_number" field.
func TrackingNumberIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldTrackingNumber, vs...))
}

// TrackingNumberNotIn applies the NotIn predicate on the "tracking_number" field.
func TrackingNumberNotIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldTrackingNumber, vs...))
}

// TrackingNumberGT applies the GT predicate on the "tracking_number" field.
func TrackingNumberGT(v string) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldTrackingNumber, v))
}

// TrackingNumberGTE applies the GTE predicate on the "tracking_number" field.
func TrackingNumberGTE(v string) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldTrackingNumber, v))
}

// TrackingNumberLT applies the LT predicate on the "tracking_number" field.
func TrackingNumberLT(v string) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldTrackingNumber, v))
}

// TrackingNumberLTE applies the LTE predicate on the "tracking_number" field.
func TrackingNumberLTE(v string) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldTrackingNumber, v))
}

// TrackingNumberContains applies the Contains predicate on the "tracking_number" field.
func TrackingNumberContains(v string) predicate.Order {
	return predicate.Order(sql.FieldContains(FieldTrackingNumber, v))
}

// TrackingNumberHasPrefix applies the HasPrefix predicate on the "tracking_number" field.
func TrackingNumberHasPrefix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasPrefix(FieldTrackingNumber, v))
}

// TrackingNumberHasSuffix applies the HasSuffix predicate on the "tracking_number" field.
func TrackingNumberHasSuffix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasSuffix(FieldTrackingNumber, v))
}

// TrackingNumberEqualFold applies the EqualFold predicate on the "tracking_number" field.
func TrackingNumberEqualFold(v string) predicate.Order {
	return predicate.Order(sql.FieldEqualFold(FieldTrackingNumber, v))
}

// TrackingNumberContainsFold applies the ContainsFold predicate on the "tracking_number" field.
func TrackingNumberContainsFold(v string) predicate.Order {
	return predicate.Order(sql.FieldContainsFold(FieldTrackingNumber, v))
}

// SafeCodeEQ applies the EQ predicate on the "safe_code" field.
func SafeCodeEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldSafeCode, v))
}

// SafeCodeNEQ applies the NEQ predicate on the "safe_code" field.
func SafeCodeNEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldSafeCode, v))
}

// SafeCodeIn applies the In predicate on the "safe_code" field.
func SafeCodeIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldSafeCode, vs...))
}

// SafeCodeNotIn applies the NotIn predicate on the "safe_code" field.
func SafeCodeNotIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldSafeCode, vs...))
}

// SafeCodeGT applies the GT predicate on the "safe_code" field.
func SafeCodeGT(v string) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldSafeCode, v))
}

// SafeCodeGTE applies the GTE predicate on the "safe_code" field.
func SafeCodeGTE(v string) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldSafeCode, v))
}

// SafeCodeLT applies the LT predicate on the "safe_code" field.
func SafeCodeLT(v string) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldSafeCode, v))
}

// SafeCodeLTE applies the LTE predicate on the "safe_code" field.
func SafeCodeLTE(v string) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldSafeCode, v))
}

// SafeCodeContains applies the Contains predicate on the "safe_code" field.
func SafeCodeContains(v string) predicate.Order {
	return predicate.Order(sql.FieldContains(FieldSafeCode, v))
}

// SafeCodeHasPrefix applies the HasPrefix predicate on the "safe_code" field.
func SafeCodeHasPrefix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasPrefix(FieldSafeCode, v))
}

// SafeCodeHasSuffix applies the HasSuffix predicate on the "safe_code" field.
func SafeCodeHasSuffix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasSuffix(FieldSafeCode, v))
}

// SafeCodeEqualFold applies the EqualFold predicate on the "safe_code" field.
func SafeCodeEqualFold(v string) predicate.Order {
	return predicate.Order(sql.FieldEqualFold(FieldSafeCode, v))
}

// SafeCodeContainsFold applies the ContainsFold predicate on the "safe_code" field.
func SafeCodeContainsFold(v string) predicate.Order {
	return predicate.Order(sql.FieldContainsFold(FieldSafeCode, v))
}

// PackageDescriptionEQ applies the EQ predicate on the "package_description" field.
func PackageDescriptionEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldPackageDescription, v))
}

// PackageDescriptionNEQ applies the NEQ predicate on the "package_description" field.
func PackageDescriptionNEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldPackageDescription, v))
}

// PackageDescriptionIn applies the In predicate on the "package_description" field.
func PackageDescriptionIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldPackageDescription, vs...))
}

// PackageDescriptionNotIn applies the NotIn predicate on the "package_description" field.
func PackageDescriptionNotIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldPackageDescription, vs...))
}

// PackageDescriptionGT applies the GT predicate on the "package_description" field.
func PackageDescriptionGT(v string) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldPackageDescription, v))
}

// PackageDescriptionGTE applies the GTE predicate on the "package_description" field.
func PackageDescriptionGTE(v string) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldPackageDescription, v))
}

// PackageDescriptionLT applies the LT predicate on the "package_description" field.
func PackageDescriptionLT(v string) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldPackageDescription, v))
}

// PackageDescriptionLTE applies the LTE predicate on the "package_description" field.
func PackageDescriptionLTE(v string) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldPackageDescription, v))
}

// PackageDescriptionContains applies the Contains predicate on the "package_description" field.
func PackageDescriptionContains(v string) predicate.Order {
	return predicate.Order(sql.FieldContains(FieldPackageDescription, v))
}

// PackageDescriptionHasPrefix applies the HasPrefix predicate on the "package_description" field.
func PackageDescriptionHasPrefix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasPrefix(FieldPackageDescription, v))
}

// PackageDescriptionHasSuffix applies the HasSuffix predicate on the "package_description" field.
func PackageDescriptionHasSuffix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasSuffix(FieldPackageDescription, v))
}

// PackageDescriptionEqualFold applies the EqualFold predicate on the "package_description" field.
func PackageDescriptionEqualFold(v string) predicate.Order {
	return predicate.Order(sql.FieldEqualFold(FieldPackageDescription, v))
}

// PackageDescriptionContainsFold applies the ContainsFold predicate on the "package_description" field.
func PackageDescriptionContainsFold(v string) predicate.Order {
	return predicate.Order(sql.FieldContainsFold(FieldPackageDescription, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldStatus, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasSender applies the HasEdge predicate on the "sender" edge.
func HasSender() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SenderTable, SenderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSenderWith applies the HasEdge predicate on the "sender" edge with a given conditions (other predicates).
func HasSenderWith(preds ...predicate.User) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := newSenderStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRecipient applies the HasEdge predicate on the "recipient" edge.
func HasRecipient() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RecipientTable, RecipientColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRecipientWith applies the HasEdge predicate on the "recipient" edge with a given conditions (other predicates).
func HasRecipientWith(preds ...predicate.User) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := newRecipientStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNotifications applies the HasEdge predicate on the "notifications" edge.
func HasNotifications() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, NotificationsTable, NotificationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNotificationsWith applies the HasEdge predicate on the "notifications" edge with a given conditions (other predicates).
func HasNotificationsWith(preds ...predicate.Notification) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := newNotificationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Order) predicate.Order {
	return predicate.Order(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Order) predicate.Order {
	return predicate.Order(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Order) predicate.Order {
	return predicate.Order(sql.NotPredicates(p))
}
