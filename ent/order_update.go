// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sundayonah/digital_post_office/ent/notification"
	"github.com/sundayonah/digital_post_office/ent/order"
	"github.com/sundayonah/digital_post_office/ent/predicate"
	"github.com/sundayonah/digital_post_office/ent/user"
)

// OrderUpdate is the builder for updating Order entities.
type OrderUpdate struct {
	config
	hooks    []Hook
	mutation *OrderMutation
}

// Where appends a list predicates to the OrderUpdate builder.
func (ou *OrderUpdate) Where(ps ...predicate.Order) *OrderUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetTrackingNumber sets the "tracking_number" field.
func (ou *OrderUpdate) SetTrackingNumber(s string) *OrderUpdate {
	ou.mutation.SetTrackingNumber(s)
	return ou
}

// SetNillableTrackingNumber sets the "tracking_number" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableTrackingNumber(s *string) *OrderUpdate {
	if s != nil {
		ou.SetTrackingNumber(*s)
	}
	return ou
}

// SetSafeCode sets the "safe_code" field.
func (ou *OrderUpdate) SetSafeCode(s string) *OrderUpdate {
	ou.mutation.SetSafeCode(s)
	return ou
}

// SetNillableSafeCode sets the "safe_code" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableSafeCode(s *string) *OrderUpdate {
	if s != nil {
		ou.SetSafeCode(*s)
	}
	return ou
}

// SetPackageDescription sets the "package_description" field.
func (ou *OrderUpdate) SetPackageDescription(s string) *OrderUpdate {
	ou.mutation.SetPackageDescription(s)
	return ou
}

// SetNillablePackageDescription sets the "package_description" field if the given value is not nil.
func (ou *OrderUpdate) SetNillablePackageDescription(s *string) *OrderUpdate {
	if s != nil {
		ou.SetPackageDescription(*s)
	}
	return ou
}

// SetStatus sets the "status" field.
func (ou *OrderUpdate) SetStatus(o order.Status) *OrderUpdate {
	ou.mutation.SetStatus(o)
	return ou
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableStatus(o *order.Status) *OrderUpdate {
	if o != nil {
		ou.SetStatus(*o)
	}
	return ou
}

// SetCreatedAt sets the "created_at" field.
func (ou *OrderUpdate) SetCreatedAt(t time.Time) *OrderUpdate {
	ou.mutation.SetCreatedAt(t)
	return ou
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableCreatedAt(t *time.Time) *OrderUpdate {
	if t != nil {
		ou.SetCreatedAt(*t)
	}
	return ou
}

// SetUpdatedAt sets the "updated_at" field.
func (ou *OrderUpdate) SetUpdatedAt(t time.Time) *OrderUpdate {
	ou.mutation.SetUpdatedAt(t)
	return ou
}

// SetSenderID sets the "sender" edge to the User entity by ID.
func (ou *OrderUpdate) SetSenderID(id int) *OrderUpdate {
	ou.mutation.SetSenderID(id)
	return ou
}

// SetSender sets the "sender" edge to the User entity.
func (ou *OrderUpdate) SetSender(u *User) *OrderUpdate {
	return ou.SetSenderID(u.ID)
}

// SetRecipientID sets the "recipient" edge to the User entity by ID.
func (ou *OrderUpdate) SetRecipientID(id int) *OrderUpdate {
	ou.mutation.SetRecipientID(id)
	return ou
}

// SetRecipient sets the "recipient" edge to the User entity.
func (ou *OrderUpdate) SetRecipient(u *User) *OrderUpdate {
	return ou.SetRecipientID(u.ID)
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by IDs.
func (ou *OrderUpdate) AddNotificationIDs(ids ...int) *OrderUpdate {
	ou.mutation.AddNotificationIDs(ids...)
	return ou
}

// AddNotifications adds the "notifications" edges to the Notification entity.
func (ou *OrderUpdate) AddNotifications(n ...*Notification) *OrderUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return ou.AddNotificationIDs(ids...)
}

// Mutation returns the OrderMutation object of the builder.
func (ou *OrderUpdate) Mutation() *OrderMutation {
	return ou.mutation
}

// ClearSender clears the "sender" edge to the User entity.
func (ou *OrderUpdate) ClearSender() *OrderUpdate {
	ou.mutation.ClearSender()
	return ou
}

// ClearRecipient clears the "recipient" edge to the User entity.
func (ou *OrderUpdate) ClearRecipient() *OrderUpdate {
	ou.mutation.ClearRecipient()
	return ou
}

// ClearNotifications clears all "notifications" edges to the Notification entity.
func (ou *OrderUpdate) ClearNotifications() *OrderUpdate {
	ou.mutation.ClearNotifications()
	return ou
}

// RemoveNotificationIDs removes the "notifications" edge to Notification entities by IDs.
func (ou *OrderUpdate) RemoveNotificationIDs(ids ...int) *OrderUpdate {
	ou.mutation.RemoveNotificationIDs(ids...)
	return ou
}

// RemoveNotifications removes "notifications" edges to Notification entities.
func (ou *OrderUpdate) RemoveNotifications(n ...*Notification) *OrderUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return ou.RemoveNotificationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OrderUpdate) Save(ctx context.Context) (int, error) {
	ou.defaults()
	return withHooks(ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OrderUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OrderUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OrderUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ou *OrderUpdate) defaults() {
	if _, ok := ou.mutation.UpdatedAt(); !ok {
		v := order.UpdateDefaultUpdatedAt()
		ou.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ou *OrderUpdate) check() error {
	if v, ok := ou.mutation.TrackingNumber(); ok {
		if err := order.TrackingNumberValidator(v); err != nil {
			return &ValidationError{Name: "tracking_number", err: fmt.Errorf(`ent: validator failed for field "Order.tracking_number": %w`, err)}
		}
	}
	if v, ok := ou.mutation.SafeCode(); ok {
		if err := order.SafeCodeValidator(v); err != nil {
			return &ValidationError{Name: "safe_code", err: fmt.Errorf(`ent: validator failed for field "Order.safe_code": %w`, err)}
		}
	}
	if v, ok := ou.mutation.PackageDescription(); ok {
		if err := order.PackageDescriptionValidator(v); err != nil {
			return &ValidationError{Name: "package_description", err: fmt.Errorf(`ent: validator failed for field "Order.package_description": %w`, err)}
		}
	}
	if v, ok := ou.mutation.Status(); ok {
		if err := order.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Order.status": %w`, err)}
		}
	}
	if ou.mutation.SenderCleared() && len(ou.mutation.SenderIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Order.sender"`)
	}
	if ou.mutation.RecipientCleared() && len(ou.mutation.RecipientIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Order.recipient"`)
	}
	return nil
}

func (ou *OrderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(order.Table, order.Columns, sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.TrackingNumber(); ok {
		_spec.SetField(order.FieldTrackingNumber, field.TypeString, value)
	}
	if value, ok := ou.mutation.SafeCode(); ok {
		_spec.SetField(order.FieldSafeCode, field.TypeString, value)
	}
	if value, ok := ou.mutation.PackageDescription(); ok {
		_spec.SetField(order.FieldPackageDescription, field.TypeString, value)
	}
	if value, ok := ou.mutation.Status(); ok {
		_spec.SetField(order.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := ou.mutation.CreatedAt(); ok {
		_spec.SetField(order.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ou.mutation.UpdatedAt(); ok {
		_spec.SetField(order.FieldUpdatedAt, field.TypeTime, value)
	}
	if ou.mutation.SenderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.SenderTable,
			Columns: []string{order.SenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.SenderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.SenderTable,
			Columns: []string{order.SenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.RecipientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.RecipientTable,
			Columns: []string{order.RecipientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RecipientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.RecipientTable,
			Columns: []string{order.RecipientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.NotificationsTable,
			Columns: []string{order.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedNotificationsIDs(); len(nodes) > 0 && !ou.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.NotificationsTable,
			Columns: []string{order.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.NotificationsTable,
			Columns: []string{order.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// OrderUpdateOne is the builder for updating a single Order entity.
type OrderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderMutation
}

// SetTrackingNumber sets the "tracking_number" field.
func (ouo *OrderUpdateOne) SetTrackingNumber(s string) *OrderUpdateOne {
	ouo.mutation.SetTrackingNumber(s)
	return ouo
}

// SetNillableTrackingNumber sets the "tracking_number" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableTrackingNumber(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetTrackingNumber(*s)
	}
	return ouo
}

// SetSafeCode sets the "safe_code" field.
func (ouo *OrderUpdateOne) SetSafeCode(s string) *OrderUpdateOne {
	ouo.mutation.SetSafeCode(s)
	return ouo
}

// SetNillableSafeCode sets the "safe_code" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableSafeCode(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetSafeCode(*s)
	}
	return ouo
}

// SetPackageDescription sets the "package_description" field.
func (ouo *OrderUpdateOne) SetPackageDescription(s string) *OrderUpdateOne {
	ouo.mutation.SetPackageDescription(s)
	return ouo
}

// SetNillablePackageDescription sets the "package_description" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillablePackageDescription(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetPackageDescription(*s)
	}
	return ouo
}

// SetStatus sets the "status" field.
func (ouo *OrderUpdateOne) SetStatus(o order.Status) *OrderUpdateOne {
	ouo.mutation.SetStatus(o)
	return ouo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableStatus(o *order.Status) *OrderUpdateOne {
	if o != nil {
		ouo.SetStatus(*o)
	}
	return ouo
}

// SetCreatedAt sets the "created_at" field.
func (ouo *OrderUpdateOne) SetCreatedAt(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetCreatedAt(t)
	return ouo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableCreatedAt(t *time.Time) *OrderUpdateOne {
	if t != nil {
		ouo.SetCreatedAt(*t)
	}
	return ouo
}

// SetUpdatedAt sets the "updated_at" field.
func (ouo *OrderUpdateOne) SetUpdatedAt(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetUpdatedAt(t)
	return ouo
}

// SetSenderID sets the "sender" edge to the User entity by ID.
func (ouo *OrderUpdateOne) SetSenderID(id int) *OrderUpdateOne {
	ouo.mutation.SetSenderID(id)
	return ouo
}

// SetSender sets the "sender" edge to the User entity.
func (ouo *OrderUpdateOne) SetSender(u *User) *OrderUpdateOne {
	return ouo.SetSenderID(u.ID)
}

// SetRecipientID sets the "recipient" edge to the User entity by ID.
func (ouo *OrderUpdateOne) SetRecipientID(id int) *OrderUpdateOne {
	ouo.mutation.SetRecipientID(id)
	return ouo
}

// SetRecipient sets the "recipient" edge to the User entity.
func (ouo *OrderUpdateOne) SetRecipient(u *User) *OrderUpdateOne {
	return ouo.SetRecipientID(u.ID)
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by IDs.
func (ouo *OrderUpdateOne) AddNotificationIDs(ids ...int) *OrderUpdateOne {
	ouo.mutation.AddNotificationIDs(ids...)
	return ouo
}

// AddNotifications adds the "notifications" edges to the Notification entity.
func (ouo *OrderUpdateOne) AddNotifications(n ...*Notification) *OrderUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return ouo.AddNotificationIDs(ids...)
}

// Mutation returns the OrderMutation object of the builder.
func (ouo *OrderUpdateOne) Mutation() *OrderMutation {
	return ouo.mutation
}

// ClearSender clears the "sender" edge to the User entity.
func (ouo *OrderUpdateOne) ClearSender() *OrderUpdateOne {
	ouo.mutation.ClearSender()
	return ouo
}

// ClearRecipient clears the "recipient" edge to the User entity.
func (ouo *OrderUpdateOne) ClearRecipient() *OrderUpdateOne {
	ouo.mutation.ClearRecipient()
	return ouo
}

// ClearNotifications clears all "notifications" edges to the Notification entity.
func (ouo *OrderUpdateOne) ClearNotifications() *OrderUpdateOne {
	ouo.mutation.ClearNotifications()
	return ouo
}

// RemoveNotificationIDs removes the "notifications" edge to Notification entities by IDs.
func (ouo *OrderUpdateOne) RemoveNotificationIDs(ids ...int) *OrderUpdateOne {
	ouo.mutation.RemoveNotificationIDs(ids...)
	return ouo
}

// RemoveNotifications removes "notifications" edges to Notification entities.
func (ouo *OrderUpdateOne) RemoveNotifications(n ...*Notification) *OrderUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return ouo.RemoveNotificationIDs(ids...)
}

// Where appends a list predicates to the OrderUpdate builder.
func (ouo *OrderUpdateOne) Where(ps ...predicate.Order) *OrderUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OrderUpdateOne) Select(field string, fields ...string) *OrderUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Order entity.
func (ouo *OrderUpdateOne) Save(ctx context.Context) (*Order, error) {
	ouo.defaults()
	return withHooks(ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OrderUpdateOne) SaveX(ctx context.Context) *Order {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OrderUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OrderUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ouo *OrderUpdateOne) defaults() {
	if _, ok := ouo.mutation.UpdatedAt(); !ok {
		v := order.UpdateDefaultUpdatedAt()
		ouo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ouo *OrderUpdateOne) check() error {
	if v, ok := ouo.mutation.TrackingNumber(); ok {
		if err := order.TrackingNumberValidator(v); err != nil {
			return &ValidationError{Name: "tracking_number", err: fmt.Errorf(`ent: validator failed for field "Order.tracking_number": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.SafeCode(); ok {
		if err := order.SafeCodeValidator(v); err != nil {
			return &ValidationError{Name: "safe_code", err: fmt.Errorf(`ent: validator failed for field "Order.safe_code": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.PackageDescription(); ok {
		if err := order.PackageDescriptionValidator(v); err != nil {
			return &ValidationError{Name: "package_description", err: fmt.Errorf(`ent: validator failed for field "Order.package_description": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.Status(); ok {
		if err := order.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Order.status": %w`, err)}
		}
	}
	if ouo.mutation.SenderCleared() && len(ouo.mutation.SenderIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Order.sender"`)
	}
	if ouo.mutation.RecipientCleared() && len(ouo.mutation.RecipientIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Order.recipient"`)
	}
	return nil
}

func (ouo *OrderUpdateOne) sqlSave(ctx context.Context) (_node *Order, err error) {
	if err := ouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(order.Table, order.Columns, sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Order.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, order.FieldID)
		for _, f := range fields {
			if !order.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != order.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.TrackingNumber(); ok {
		_spec.SetField(order.FieldTrackingNumber, field.TypeString, value)
	}
	if value, ok := ouo.mutation.SafeCode(); ok {
		_spec.SetField(order.FieldSafeCode, field.TypeString, value)
	}
	if value, ok := ouo.mutation.PackageDescription(); ok {
		_spec.SetField(order.FieldPackageDescription, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Status(); ok {
		_spec.SetField(order.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := ouo.mutation.CreatedAt(); ok {
		_spec.SetField(order.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ouo.mutation.UpdatedAt(); ok {
		_spec.SetField(order.FieldUpdatedAt, field.TypeTime, value)
	}
	if ouo.mutation.SenderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.SenderTable,
			Columns: []string{order.SenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.SenderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.SenderTable,
			Columns: []string{order.SenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.RecipientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.RecipientTable,
			Columns: []string{order.RecipientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RecipientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.RecipientTable,
			Columns: []string{order.RecipientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.NotificationsTable,
			Columns: []string{order.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedNotificationsIDs(); len(nodes) > 0 && !ouo.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.NotificationsTable,
			Columns: []string{order.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.NotificationsTable,
			Columns: []string{order.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Order{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
